//Есть функция.Она принимает некий объект А, у которого есть поля со значениями
// - или undefined 
// - или объекта с одним полем cvalue, который 
//      либо undefined 
//      либо по типу равный 
//           либо строке, 
//           либо числу, 
//           либо ссылке на объект по своей структуре/описанию подобный описываемому объекту А.
// ...Функция должна вернуть сумму "значений" поля cvalue всех полей объекта, притом,
// - если у очередного элемента поле сvalue - это число, 
//   то просто добавляем это число.
// - если у очередного элемента поле сvalue - это строка, 
//   то просто конвертим строку в число и добавляем.
// - если у очередного элемента поле cvalue - это объект подобный корневому, 
//   то добавляем сумму его полей (привет рекурсия)
// - если мы натыкаемся на undefined, или же если cvalue был строкой которая по факту не являлась адекватным числом - 
//   то тогда значением будет 2022.

// например, для { hello: {cvalue: 1}, world: { cvalue: { yay: { cvalue: "2" } } } } 
// должно вернуться 3

// Скоро дадим вам функцию, но она немного багонутая. 
// Попробуйте найти в ней все баги самостоятельно без запуска этого кода. 
// Когда вы увидели все баги и готовы их исправлять, то сделайте это (НО НЕ НАДО ПЕРЕПИСЫВАТЬ С НУЛЯ :)) ), 
// и когда будете уверены что функция работает ок - можете попробовать запустить ее и потестить. 
// Перед запуском изучите, что ваш любимый редактор подсвечивает в коде. 
// Нашел ли он какие-то ошибки?
// Если допустить, что все-таки вы пропустили ряд ошибок, то время протестировать тайпскрипт.

// 1) сложный этап. напишите нормальную тайпскриптовую сигнатуру функции 
// (отдельно опишите тип первого аргумента в виде interface)

// 2) если не получилось, смотрите спойлер: https://pastebin.com/2nEJvk04

// 3) пользуясь силой тайпскрипта и описанной сигнатуры, 
// найдите как можно больше ошибок, которых не нашли раньше. 
// По мере фикса кода, обнаруживайте еще ошибки на шару в процессе кодинга, 
// без запуска программы.
// результат скиньте @roman

interface BigObject {
	[key: string]: { cvalue: number | string | undefined | BigObject } | undefined;
}


function summ(a: BigObject) {
	const x: Array<any> = Object.keys(a).map((k) => {
		const elem = a[k];
		if (typeof elem === undefined) return 2022
		if (elem?.cvalue) {
			if (typeof elem.cvalue === 'string') {
				return +elem.cvalue || 2022;
			}
			if (typeof elem.cvalue === 'number') return elem.cvalue;

			if (typeof elem.cvalue === 'object' && elem.cvalue !== null) return summ(elem.cvalue);
		} else return 2022
	});
	let sum = 0;
	if (x) {
		for (let i = 0; i < x.length; i++) {
			sum += x[i];
		}

	}
	return sum;
}

const o: BigObject = {
	b: { cvalue: 10 },
	c: { cvalue: '10' },
	d: { cvalue: undefined }
}

const obj: BigObject = {
	a: undefined,
	b: { cvalue: 10 },
	c: { cvalue: '10' },
	d: { cvalue: undefined },
	e: { cvalue: o },

}
console.log(summ(obj))
